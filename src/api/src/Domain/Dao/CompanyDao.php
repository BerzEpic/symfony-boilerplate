<?php
/*
 * This file has been automatically generated by TDBM.
 * You can edit this file as it will not be overwritten.
 */

declare(strict_types=1);

namespace App\Domain\Dao;

use App\Domain\Dao\Generated\BaseCompanyDao;
use App\Domain\Enum\Filter\CompaniesSortBy;
use App\Domain\Enum\Filter\SortOrder;
use App\Domain\Model\Company;
use App\Domain\Model\User;
use App\Domain\ResultIterator\CompanyResultIterator;
use App\Domain\Throwable\InvalidModel;
use Symfony\Component\Validator\Validator\ValidatorInterface;
use TheCodingMachine\TDBM\TDBMService;

/**
 * The CompanyDao class will maintain the persistence of Company class into the companies table.
 */
class CompanyDao extends BaseCompanyDao
{
    private ValidatorInterface $validator;

    public function __construct(TDBMService $tdbmService, ValidatorInterface $validator)
    {
        $this->validator = $validator;
        parent::__construct($tdbmService);
    }

    /**
     * @throws InvalidModel
     */
    public function validate(Company $company): void
    {
        $violations = $this->validator->validate($company);
        InvalidModel::throwException($violations);
    }

    /**
     * @throws InvalidModel
     */
    public function save(Company $company): void
    {
        $this->validate($company);
        parent::save($company);
    }

    /**
     * @return Company[]|CompanyResultIterator
     */
    public function search(
        ?string $search = null,
        ?User $user = null,
        ?CompaniesSortBy $sortBy = null,
        ?SortOrder $sortOrder = null
    ): CompanyResultIterator {
        $sortBy    = $sortBy ?: CompaniesSortBy::NAME();
        $sortOrder = $sortOrder ?: SortOrder::ASC();

        return $this->find(
            [
                'name LIKE :search OR website LIKE :search',
                'user_id = :userId',
            ],
            [
                'search' => '%' . $search . '%',
                'userId' => $user !== null ? $user->getId() : null,
            ],
            $sortBy . ' ' . $sortOrder
        );
    }
}
