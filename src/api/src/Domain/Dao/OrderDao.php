<?php
/*
 * This file has been automatically generated by TDBM.
 * You can edit this file as it will not be overwritten.
 */

declare(strict_types=1);

namespace App\Domain\Dao;

use App\Domain\Dao\Generated\BaseOrderDao;
use App\Domain\Enum\Filter\OrdersSortBy;
use App\Domain\Enum\Filter\SortOrder;
use App\Domain\Model\Order;
use App\Domain\Model\User;
use App\Domain\Throwable\InvalidModel;
use Symfony\Component\Validator\Validator\ValidatorInterface;
use TheCodingMachine\TDBM\ResultIterator;
use TheCodingMachine\TDBM\TDBMService;
use TheCodingMachine\TDBM\UncheckedOrderBy;

/**
 * The OrderDao class will maintain the persistence of Order class into the orders table.
 */
class OrderDao extends BaseOrderDao
{
    private ValidatorInterface $validator;

    public function __construct(TDBMService $tdbmService, ValidatorInterface $validator)
    {
        $this->validator = $validator;
        parent::__construct($tdbmService);
    }

    /**
     * @throws InvalidModel
     */
    public function validate(Order $order): void
    {
        $violations = $this->validator->validate($order);
        InvalidModel::throwException($violations);
    }

    /**
     * @throws InvalidModel
     */
    public function save(Order $order): void
    {
        $this->validate($order);
        parent::save($order);
    }

    /**
     * @return Order[]|ResultIterator
     */
    public function search(
        ?string $search = null,
        ?User $user = null,
        ?OrdersSortBy $sortBy = null,
        ?SortOrder $sortOrder = null
    ): ResultIterator {
        $sortBy    = $sortBy ?: OrdersSortBy::PRODUCT_NAME();
        $sortOrder = $sortOrder ?: SortOrder::ASC();
        $orderBy   = $sortBy . ' ' . $sortOrder;

        // When using an expression in an ORDER BY statement,
        // we must wrap it in a UncheckedOrderBy object.
        if ($sortBy->equals(OrdersSortBy::TOTAL())) {
            $orderBy = new UncheckedOrderBy($orderBy);
        }

        return $this->find(
            [
                'products.name LIKE :search',
                'user_id = :userId',
            ],
            [
                'search' => '%' . $search . '%',
                'userId' => $user !== null ? $user->getId() : null,
            ],
            $orderBy,
            ['products']
        );
    }
}
