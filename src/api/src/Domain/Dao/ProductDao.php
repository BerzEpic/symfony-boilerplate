<?php
/*
 * This file has been automatically generated by TDBM.
 * You can edit this file as it will not be overwritten.
 */

declare(strict_types=1);

namespace App\Domain\Dao;

use App\Domain\Dao\Generated\BaseProductDao;
use App\Domain\Model\Filter\ProductsFilters;
use App\Domain\Model\Product;
use App\Domain\Throwable\Exists\ProductWithNameExists;
use App\Domain\Throwable\Invalid\InvalidProduct;
use App\Domain\Throwable\Invalid\InvalidProductsFilters;
use Symfony\Component\Validator\Validator\ValidatorInterface;
use TheCodingMachine\TDBM\ResultIterator;
use TheCodingMachine\TDBM\TDBMService;

/**
 * The ProductDao class will maintain the persistence of Product class into the products table.
 */
class ProductDao extends BaseProductDao
{
    private ValidatorInterface $validator;

    public function __construct(TDBMService $tdbmService, ValidatorInterface $validator)
    {
        $this->validator = $validator;
        parent::__construct($tdbmService);
    }

    /**
     * @throws InvalidProduct
     */
    public function save(Product $product): void
    {
        $violations = $this->validator->validate($product);
        InvalidProduct::throwException($violations);

        parent::save($product);
    }

    /**
     * @throws ProductWithNameExists
     */
    public function mustNotFindOneByName(string $name): void
    {
        $product = $this->findOneByName($name);

        if ($product === null) {
            return;
        }

        throw new ProductWithNameExists($name);
    }

    /**
     * @return Product[]|ResultIterator
     *
     * @throws InvalidProductsFilters
     */
    public function search(ProductsFilters $filters): ResultIterator
    {
        $violations = $this->validator->validate($filters);
        InvalidProductsFilters::throwException($violations);

        return $this->find(
            [
                'name LIKE :search',
                'price >= :lowerPrice',
                'price <= :upperPrice',
            ],
            [
                'search' => '%' . $filters->getSearch() . '%',
                'lowerPrice' => $filters->getLowerPrice(),
                'upperPrice' => $filters->getUpperPrice(),
            ],
            $filters->getSortBy() . ' ' . $filters->getSortOrder()
        );
    }
}
