<?php
/*
 * This file has been automatically generated by TDBM.
 * You can edit this file as it will not be overwritten.
 */

declare(strict_types=1);

namespace App\Domain\Model;

use App\Domain\Constraint as DomainAssert;
use App\Domain\Model\Generated\BaseCompany;
use Symfony\Component\Validator\Constraints as Assert;
use TheCodingMachine\GraphQLite\Annotations\Field;
use TheCodingMachine\GraphQLite\Annotations\Type;

use function array_merge;

/**
 * The Company class maps the 'companies' table in database.
 *
 * @Type
 * @DomainAssert\Unicity(table="companies", column="name", message="assert.company.name_not_unique")
 */
class Company extends BaseCompany
{
    /**
     * @Field
     * @Assert\NotBlank(message="assert.not_blank")
     * @Assert\Length(max=255, maxMessage="assert.max_length_255")
     */
    public function getName(): string
    {
        return parent::getName();
    }

    /**
     * @Field
     * @Assert\NotBlank(allowNull=true, message="assert.not_blank")
     * @Assert\Length(max=255, maxMessage="assert.max_length_255")
     * @Assert\Url(message="assert.invalid_url")
     */
    public function getWebsite(): ?string
    {
        return parent::getWebsite();
    }

    /**
     * @return string[]
     */
    public function getProductsPictures(): array
    {
        $products    = $this->getProducts();
        $allPictures = [];

        foreach ($products as $product) {
            $pictures = $product->getPictures();

            if (empty($pictures)) {
                continue;
            }

            $allPictures = array_merge($allPictures, $pictures);
        }

        return $allPictures;
    }
}
