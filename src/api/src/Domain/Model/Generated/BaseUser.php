<?php
/**
 * This file has been automatically generated by TDBM.
 *
 * DO NOT edit this file, as it might be overwritten.
 * If you need to perform changes, edit the User class instead!
 */

declare(strict_types=1);

namespace App\Domain\Model\Generated;

use App\Domain\Model\Role;
use App\Domain\Model\Company;
use TheCodingMachine\TDBM\AbstractTDBMObject;
use TheCodingMachine\TDBM\ResultIterator;
use TheCodingMachine\TDBM\AlterableResultIterator;
use Ramsey\Uuid\Uuid;
use JsonSerializable;
use TheCodingMachine\TDBM\Schema\ForeignKeys;
use TheCodingMachine\GraphQLite\Annotations\Field as GraphqlField;

/**
 * The BaseUser class maps the 'users' table in database.
 */
abstract class BaseUser extends \TheCodingMachine\TDBM\AbstractTDBMObject implements JsonSerializable
{

    /**
     * @var \TheCodingMachine\TDBM\Schema\ForeignKeys
     */
    private static $foreignKeys = null;

    /**
     * The constructor takes all compulsory arguments.
     *
     * @param \App\Domain\Model\Role $role
     * @param string $firstName
     * @param string $lastName
     * @param string $email
     */
    public function __construct(\App\Domain\Model\Role $role, string $firstName, string $lastName, string $email)
    {
        parent::__construct();
        $this->setRole($role);
        $this->setFirstName($firstName);
        $this->setLastName($lastName);
        $this->setEmail($email);
        $this->setId(Uuid::uuid1()->toString());
    }

    /**
     * The getter for the "id" column.
     *
     * @return string
     * @GraphqlField (outputType = "ID")
     */
    public function getId() : string
    {
        return $this->get('id', 'users');
    }

    /**
     * The setter for the "id" column.
     *
     * @param string $id
     */
    public function setId(string $id) : void
    {
        $this->set('id', $id, 'users');
    }

    /**
     * Returns the Role object bound to this object via the role_id column.
     *
     * @GraphqlField
     */
    public function getRole() : \App\Domain\Model\Role
    {
        return $this->getRef('from__role_id__to__table__roles__columns__id', 'users');
    }

    /**
     * The setter for the Role object bound to this object via the role_id column.
     */
    public function setRole(\App\Domain\Model\Role $object) : void
    {
        $this->setRef('from__role_id__to__table__roles__columns__id', $object, 'users');
    }

    /**
     * The getter for the "first_name" column.
     *
     * @return string
     * @GraphqlField
     */
    public function getFirstName() : string
    {
        return $this->get('first_name', 'users');
    }

    /**
     * The setter for the "first_name" column.
     *
     * @param string $first_name
     */
    public function setFirstName(string $first_name) : void
    {
        $this->set('first_name', $first_name, 'users');
    }

    /**
     * The getter for the "last_name" column.
     *
     * @return string
     * @GraphqlField
     */
    public function getLastName() : string
    {
        return $this->get('last_name', 'users');
    }

    /**
     * The setter for the "last_name" column.
     *
     * @param string $last_name
     */
    public function setLastName(string $last_name) : void
    {
        $this->set('last_name', $last_name, 'users');
    }

    /**
     * The getter for the "email" column.
     *
     * @return string
     * @GraphqlField
     */
    public function getEmail() : string
    {
        return $this->get('email', 'users');
    }

    /**
     * The setter for the "email" column.
     *
     * @param string $email
     */
    public function setEmail(string $email) : void
    {
        $this->set('email', $email, 'users');
    }

    /**
     * The getter for the "password" column.
     *
     * @return string|null
     */
    public function getPassword() : ?string
    {
        return $this->get('password', 'users');
    }

    /**
     * The setter for the "password" column.
     *
     * @param string|null $password
     */
    public function setPassword(?string $password) : void
    {
        $this->set('password', $password, 'users');
    }

    /**
     * Returns the list of Company associated to this bean via the users_companies pivot table.
     *
     * @return \App\Domain\Model\Company[]
     * @GraphqlField
     */
    public function getCompanies() : array
    {
        return $this->_getRelationships('users_companies.user_id');
    }

    /**
     * Adds a relationship with Company associated to this bean via the users_companies pivot table.
     *
     * @param \App\Domain\Model\Company $company
     */
    public function addCompany(\App\Domain\Model\Company $company) : void
    {
        $this->addRelationship('users_companies', $company);
    }

    /**
     * Deletes the relationship with Company associated to this bean via the users_companies pivot table.
     *
     * @param \App\Domain\Model\Company $company
     */
    public function removeCompany(\App\Domain\Model\Company $company) : void
    {
        $this->_removeRelationship('users_companies', $company);
    }

    /**
     * Returns whether this bean is associated with Company via the users_companies pivot table.
     *
     * @param \App\Domain\Model\Company $company
     * @return bool
     */
    public function hasCompany(\App\Domain\Model\Company $company) : bool
    {
        return $this->hasRelationship('users_companies.user_id', $company);
    }

    /**
     * Sets all relationships with Company associated to this bean via the users_companies pivot table.
     * Exiting relationships will be removed and replaced by the provided relationships.
     *
     * @param \App\Domain\Model\Company[] $companys
     * @return void
     */
    public function setCompanies(array $companys) : void
    {
        $this->setRelationships('users_companies.user_id', $companys);
    }

    /**
     * Get the paths used for many to many relationships methods.
     *
     * @internal
     */
    public function _getManyToManyRelationshipDescriptor(string $pathKey) : \TheCodingMachine\TDBM\Utils\ManyToManyRelationshipPathDescriptor
    {
        switch ($pathKey) {
            case 'users_companies.user_id':
                return new \TheCodingMachine\TDBM\Utils\ManyToManyRelationshipPathDescriptor('companies', 'users_companies', ['id'], ['company_id'], ['user_id']);
            default:
                return parent::_getManyToManyRelationshipDescriptor($pathKey);
        }
    }

    /**
     * Returns the list of keys supported for many to many relationships
     *
     * @internal
     * @return string[]
     */
    public function _getManyToManyRelationshipDescriptorKeys() : array
    {
        return array_merge(parent::_getManyToManyRelationshipDescriptorKeys(), ['users_companies.user_id']);
    }

    /**
     * Internal method used to retrieve the list of foreign keys attached to this bean.
     */
    protected static function getForeignKeys(string $tableName) : \TheCodingMachine\TDBM\Schema\ForeignKeys
    {
        if ($tableName === 'users') {
            if (self::$foreignKeys === null) {
                self::$foreignKeys = new ForeignKeys([
                    'from__role_id__to__table__roles__columns__id' => [
                        'foreignTable' => 'roles',
                        'localColumns' => [
                            'role_id'
                        ],
                        'foreignColumns' => [
                            'id'
                        ]
                    ]
                ]);
            }
            return self::$foreignKeys;
        }
        return parent::getForeignKeys($tableName);
    }

    /**
     * Serializes the object for JSON encoding.
     *
     * @param bool $stopRecursion Parameter used internally by TDBM to stop embedded
     * objects from embedding other objects.
     * @return array
     */
    public function jsonSerialize(bool $stopRecursion = false)
    {
        $array = [];
        $array['id'] = $this->getId();
        if ($stopRecursion) {
            $array['role'] = ['id' => $this->getRole()->getId()];
        } else {
            $array['role'] = $this->getRole()->jsonSerialize(true);
        }
        $array['firstName'] = $this->getFirstName();
        $array['lastName'] = $this->getLastName();
        $array['email'] = $this->getEmail();
        $array['password'] = $this->getPassword();
        if (!$stopRecursion) {
            $array['companies'] = array_map(function (Company $object) {
                return $object->jsonSerialize(true);
            }, $this->getCompanies());
        };
        return $array;
    }

    /**
     * Returns an array of used tables by this bean (from parent to child
     * relationship).
     *
     * @return string[]
     */
    public function getUsedTables() : array
    {
        return [ 'users' ];
    }

    /**
     * Method called when the bean is removed from database.
     */
    public function onDelete() : void
    {
        parent::onDelete();
        $this->setRef('from__role_id__to__table__roles__columns__id', null, 'users');
    }

    public function __clone()
    {
        $this->getCompanies();

        parent::__clone();
        $this->setId(Uuid::uuid1()->toString());
    }
}
