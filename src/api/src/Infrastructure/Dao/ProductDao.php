<?php
/*
 * This file has been automatically generated by TDBM.
 * You can edit this file as it will not be overwritten.
 */

declare(strict_types=1);

namespace App\Infrastructure\Dao;

use App\Domain\Model\Product;
use App\Domain\Repository\ProductRepository;
use App\Domain\Throwable\Exists\ProductWithNameExists;
use App\Domain\Throwable\Invalid\InvalidProduct;
use App\Domain\Throwable\NotFound\ProductNotFoundById;
use App\Infrastructure\Dao\Generated\BaseProductDao;
use Symfony\Component\Validator\Validator\ValidatorInterface;
use TheCodingMachine\TDBM\TDBMService;

/**
 * The ProductDao class will maintain the persistence of Product class into the products table.
 */
class ProductDao extends BaseProductDao implements ProductRepository
{
    private ValidatorInterface $validator;

    public function __construct(TDBMService $tdbmService, ValidatorInterface $validator)
    {
        $this->validator = $validator;
        parent::__construct($tdbmService);
    }

    /**
     * @throws InvalidProduct
     */
    public function save(Product $product): void
    {
        $violations = $this->validator->validate($product);
        InvalidProduct::throwException($violations);

        parent::save($product);
    }

    /**
     * @throws ProductNotFoundById
     */
    public function mustFindOneById(string $id): Product
    {
        $product = $this->findOne(['id' => $id]);

        if ($product !== null) {
            return $product;
        }

        throw new ProductNotFoundById($id);
    }

    /**
     * @throws ProductWithNameExists
     */
    public function mustNotFindOneByName(string $name): void
    {
        $product = $this->findOneByName($name);

        if ($product === null) {
            return;
        }

        throw new ProductWithNameExists($name);
    }
}
